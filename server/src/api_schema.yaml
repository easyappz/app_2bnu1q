openapi: 3.0.3
info:
  title: Admin API
  version: 1.0.0
  description: |
    Admin endpoints for authentication, payments, subscribers and stats.

servers:
  - url: /api

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

paths:
  /auth/register-admin:
    post:
      summary: Create the first admin
      description: Create an admin account if none exists yet. Public endpoint.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required: [ok, user]
                properties:
                  ok:
                    type: boolean
                  user:
                    type: object
                    required: [email, role]
                    properties:
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                        enum: [admin]
              example:
                ok: true
                user:
                  email: admin@example.com
                  role: admin
        '400':
          description: Bad request (validation error or admin already exists)
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
              examples:
                adminExists:
                  value:
                    ok: false
                    error: Admin already exists. Registration is allowed only once.
                invalidEmail:
                  value:
                    ok: false
                    error: Email is required
                weakPassword:
                  value:
                    ok: false
                    error: Password must be at least 6 characters long
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
              example:
                ok: false
                error: Unexpected error details
  /auth/login:
    post:
      summary: Admin login
      description: Authenticate admin user by email and password. Public endpoint.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required: [ok, token, user]
                properties:
                  ok:
                    type: boolean
                  token:
                    type: string
                    description: JWT token to be sent as Authorization: Bearer <token>
                  user:
                    type: object
                    required: [email, role]
                    properties:
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                        enum: [admin]
              example:
                ok: true
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  email: admin@example.com
                  role: admin
        '400':
          description: Bad request (missing email or password)
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
              example:
                ok: false
                error: Email and password are required
        '401':
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
              example:
                ok: false
                error: Invalid email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
              example:
                ok: false
                error: Unexpected error details
  /settings:
    get:
      summary: Get settings
      description: Returns current Settings object.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required: [ok, data]
                properties:
                  ok: { type: boolean }
                  data:
                    type: object
                    properties:
                      botToken: { type: string }
                      providerToken: { type: string }
                      channelId: { type: string }
                      channelUsername: { type: string }
                      productName: { type: string }
                      priceCents: { type: integer }
                      currency:
                        type: string
                        enum: [RUB]
                      description: { type: string }
                      webhookUrl: { type: string }
              example:
                ok: true
                data:
                  botToken: "123456:ABCDEF"
                  providerToken: "381764:TEST-PROVIDER-TOKEN"
                  channelId: "-1001234567890"
                  channelUsername: "my_channel"
                  productName: "Access to channel"
                  priceCents: 12900
                  currency: RUB
                  description: "Monthly subscription"
                  webhookUrl: "https://example.com/api/telegram/webhook"
        '401':
          description: Unauthorized
    put:
      summary: Update settings
      description: |
        Updates Settings. Payment fields must be provided together. Aliases are supported for backward compatibility and are deprecated.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [providerToken, productName, priceCents, currency]
              properties:
                botToken:
                  type: string
                  description: Telegram bot token
                providerToken:
                  type: string
                  description: Payments provider token (Telegram Payments provider_token)
                channelId:
                  type: string
                channelUsername:
                  type: string
                productName:
                  type: string
                priceCents:
                  type: integer
                currency:
                  type: string
                  enum: [RUB]
                  description: Only RUB is supported
                description:
                  type: string
                webhookUrl:
                  type: string
                telegramBotToken:
                  type: string
                  deprecated: true
                  description: Alias for botToken (deprecated). Will be mapped to botToken.
                telegramWebhookUrl:
                  type: string
                  deprecated: true
                  description: Alias for webhookUrl (deprecated). Will be mapped to webhookUrl.
                provider_token:
                  type: string
                  deprecated: true
                  description: Alias for providerToken (deprecated). Will be mapped to providerToken.
            examples:
              canonical:
                summary: Canonical fields
                value:
                  botToken: "123456:ABCDEF"
                  providerToken: "381764:LIVE:AAA"
                  channelId: "-1001234567890"
                  channelUsername: "my_channel"
                  productName: "Access to channel"
                  priceCents: 9900
                  currency: RUB
                  description: "Monthly subscription"
                  webhookUrl: "https://example.com/api/telegram/webhook"
              withAliases:
                summary: Deprecated aliases are accepted
                value:
                  telegramBotToken: "123456:ABCDEF"
                  provider_token: "381764:LIVE:AAA"
                  productName: "Access to channel"
                  priceCents: 9900
                  currency: RUB
                  telegramWebhookUrl: "https://example.com/api/telegram/webhook"
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                required: [ok, data]
                properties:
                  ok: { type: boolean }
                  data:
                    type: object
                    properties:
                      botToken: { type: string }
                      providerToken: { type: string }
                      channelId: { type: string }
                      channelUsername: { type: string }
                      productName: { type: string }
                      priceCents: { type: integer }
                      currency:
                        type: string
                        enum: [RUB]
                      description: { type: string }
                      webhookUrl: { type: string }
              example:
                ok: true
                data:
                  botToken: "123456:ABCDEF"
                  providerToken: "381764:LIVE:AAA"
                  channelId: "-1001234567890"
                  channelUsername: "my_channel"
                  productName: "Access to channel"
                  priceCents: 9900
                  currency: RUB
                  description: "Monthly subscription"
                  webhookUrl: "https://example.com/api/telegram/webhook"
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                type: object
                required: [ok, error]
                properties:
                  ok: { type: boolean }
                  error: { type: string }
              examples:
                emptyProviderToken:
                  summary: providerToken is empty
                  value:
                    ok: false
                    error: "providerToken is required and must be a non-empty string Required together: providerToken, productName, priceCents, currency."
                wrongCurrency:
                  summary: currency must be RUB
                  value:
                    ok: false
                    error: "currency must be RUB Required together: providerToken, productName, priceCents, currency."
        '401':
          description: Unauthorized
  /payments:
    get:
      summary: List payments
      description: |
        Returns paginated list of payments with optional filters by date period and status.
        Totals are calculated for the same filtered period.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: from
          description: ISO date string (inclusive)
          schema: { type: string, format: date-time }
        - in: query
          name: to
          description: ISO date string (inclusive)
          schema: { type: string, format: date-time }
        - in: query
          name: status
          schema:
            type: string
            enum: [paid, failed]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items:
                    type: array
                    items:
                      type: object
                  total: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
                  totals:
                    type: object
                    properties:
                      amountCents: { type: integer }
                      count: { type: integer }
              example:
                ok: true
                items:
                  - _id: 665f0a...
                    amountCents: 1299
                    currency: USD
                    status: paid
                    createdAt: 2024-10-01T12:00:00.000Z
                  - _id: 665f0b...
                    amountCents: 499
                    currency: USD
                    status: failed
                    createdAt: 2024-10-01T11:10:00.000Z
                total: 42
                page: 1
                pageSize: 20
                totals:
                  amountCents: 452300
                  count: 42
        '400':
          description: Bad request
          content:
            application/json:
              example:
                ok: false
                error: "Invalid 'from' date"
        '401':
          description: Unauthorized
  /subscribers:
    get:
      summary: List subscribers
      description: |
        Returns paginated list of subscribers with optional status filter and simple substring search across username, firstName, lastName.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: q
          description: Substring search across username / firstName / lastName (case-insensitive)
          schema: { type: string }
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items:
                    type: array
                    items:
                      type: object
                  total: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
              example:
                ok: true
                items:
                  - _id: 665f1a...
                    username: johndoe
                    firstName: John
                    lastName: Doe
                    status: active
                    createdAt: 2024-09-20T08:00:00.000Z
                total: 5
                page: 1
                pageSize: 20
        '400':
          description: Bad request
          content:
            application/json:
              example:
                ok: false
                error: "Invalid status. Allowed: 'active' | 'inactive'"
        '401':
          description: Unauthorized
  /stats/summary:
    get:
      summary: Payments summary
      description: Sum and count of paid payments for a period.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: range
          required: true
          schema:
            type: string
            enum: [day, week, month]
          description: |
            Period definition:
            - day: from today 00:00:00Z to now
            - week: last 7 days including today
            - month: last 30 days including today
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  range: { type: string }
                  from: { type: string, format: date-time }
                  to: { type: string, format: date-time }
                  amountCents: { type: integer }
                  count: { type: integer }
              example:
                ok: true
                range: week
                from: 2024-09-25T00:00:00.000Z
                to: 2024-10-01T13:45:10.123Z
                amountCents: 128990
                count: 37
        '400':
          description: Bad request
          content:
            application/json:
              example:
                ok: false
                error: "Invalid 'range'. Allowed: day | week | month"
        '401':
          description: Unauthorized
  /stats/timeseries:
    get:
      summary: Payments timeseries
      description: Returns daily time series of paid payments between from/to (inclusive). Missing days are filled with zeros.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: from
          required: true
          schema: { type: string, format: date-time }
        - in: query
          name: to
          required: true
          schema: { type: string, format: date-time }
        - in: query
          name: interval
          schema:
            type: string
            enum: [day]
            default: day
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  from: { type: string, format: date-time }
                  to: { type: string, format: date-time }
                  interval: { type: string }
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        date: { type: string }
                        amountCents: { type: integer }
                        count: { type: integer }
                  totals:
                    type: object
                    properties:
                      amountCents: { type: integer }
                      count: { type: integer }
              example:
                ok: true
                from: 2024-09-01T00:00:00.000Z
                to: 2024-09-07T23:59:59.999Z
                interval: day
                items:
                  - date: 2024-09-01
                    amountCents: 1000
                    count: 2
                  - date: 2024-09-02
                    amountCents: 0
                    count: 0
                  - date: 2024-09-03
                    amountCents: 2500
                    count: 3
                totals:
                  amountCents: 3500
                  count: 5
        '400':
          description: Bad request
          content:
            application/json:
              example:
                ok: false
                error: "'from' and 'to' are required in ISO format"
        '401':
          description: Unauthorized
